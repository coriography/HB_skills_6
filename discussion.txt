Runtime
-------

1. Runtime for does_string_contain_letter:

I think this runtime would be "linear" or O(n), because the function would have to look at each letter in the string to determine whether the letter matched one of them. Therefore, the runtime would be dependent on the length of the string (n).

2. Runtime for duplicate_letters:
 This would be "quadratic time" or O(n^2) because it is two nested loops - the function has to search the length of one string, times the length of the other string. (There is actually a third nested search, whether letter is in duplicates, which I think would make it more like O(n^3), but if I'm pattern matching from what I've learned, that would "reduce" to O(n^2).)


3. Runtime for duplicate_letters2:
This one looks like O(n). creating the set out of string2 would be O(n) based on length, then the for loop through string1 would be O(n) based on length, but set lookup (if letter in string2) is O(1). the two O(n) lines in succession combine to O(2n), which reduces to O(n).


Stacks and Queues
-----------------


1. Which would be a better data structure for creating a Stack: a Linked List or 
   a built-in Python list? Explain why, referencing the runtime requirements for
   Stack operations (push, pop, etc).






2. Which would be a better data structure for creating a Queue: a Linked List or
   a built-in Python list? Explain why, referencing the runtime requirements for
   Queue methods (enqueue, dequeue, etc).



Trees
-----

1. Using the diagram in the instructions, in what order would a Breadth First
   Search (BFS) algorithm visit each node  until finding burritos (starting at
   food)?


2. Using the diagram in the instructions, In what order would a Depth First 
   Search (DFS) algorithm visit each node until finding Chicago-style (starting
   at food)? 

3. How is a binary search tree different from other trees?



